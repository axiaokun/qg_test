#ifndef BINARYTREE_H_INCLUDED
#define BINARYTREE_H_INCLUDED
#define MAXSIZE  10

typedef char TElemType;

typedef struct BiTNode
{
    TElemType data;
    int tag;
    struct BiTNode *lchild, *rchild;
}BiTNode, *BiTree;

typedef enum Status
{
    ERROR,
    SUCCESS
}Status;

typedef struct 
{
    BiTree data[MAXSIZE];
    int front, rear;
}Queue;


int num[MAXSIZE];
int top;

extern into_data;


/**
 *  @name        : Status InitBiTree(BiTree T);
 *  @description : 构造空二叉树T
 *  @param       : 二叉树根结点T
 */
Status InitBiTree(BiTree *T);

/**
 *  @name        : Status DestroyBiTree(BiTree T);
 *  @description : 摧毁二叉树T
 *  @param       : 二叉树根结点T
 */
Status DestroyBiTree(BiTree *T);

/**
 *  @name        : Status CreateBiTree(BiTree T, char* definition);
 *  @description : 构造二叉树T
 *  @param       : 二叉树根结点T, 二叉树先序遍历字符串definition
 */
Status CreateBiTree(BiTree *T, char* definition);

/**
 *  @name        : Status PreOrderTraverse(BiTree T, Status (*visit)(TElemType e));
 *  @description : 先序遍历二叉树T
 *  @param       : 二叉树根结点T, 对结点的操作函数visit
 */
    Status PreOrderTraverse(BiTree T, Status (*visit)(TElemType e));


/**
 *  @name       :    Status visit(TElemType e)
 *  @description  :  打印节点元素
 *  @param     :     节点数据域TElemType
*/
Status print(TElemType e);

/**
 *  @name     :    int pchuo(void)
 *   @description   :   判断输入是否为整数
 *   @param        :    无
 *   @return      :    一个整数
 *  @notion      :     None 
*/
int pchuo(void);

/**
 *  @name        : Status InOrderTraverse(BiTree T, Status (*visit)(TElemType e));	
 *  @description : 中序遍历二叉树T
 *  @param       : 二叉树根结点T, 对结点的操作函数visit
 */
Status InOrderTraverse(BiTree T, Status (*visit)(TElemType e));	


/**
 *  @name        : Status PostOrderTraverse(BiTree T, Status (*visit)(TElemType e)));
 *  @description : 后序遍历二叉树T
 *  @param       : 二叉树根结点T, 对结点的操作函数visit
 */
Status PostOrderTraverse(BiTree T, Status (*visit)(TElemType e));


/**
 *  @name        : Status LevelOrderTraverse(BiTree T, Status (*visit)(TElemType e));
 *  @description : 层序遍历二叉树T
 *  @param       : 二叉树根结点T, 对结点的操作函数visit
 */
Status LevelOrderTraverse(BiTree T, Status (*visit)(TElemType e));

/**
 *  @name        : int Value(BiTree T);
 *  @description : 对构造出的前缀表达式二叉树求值
 *  @param       : 二叉树根结点T
 *  @note        : 可在结点结构体中设置个Tag值标志数字与操作符来构造二叉树，
 *                 可根据需要自行增加操作.
 */
int Value(BiTree T);

/**
 *  @name       : void input(char *data)
 *  @description: 对输入的前缀表达式加入虚节点
 *  @param：   输入的前缀表达式
*/
void input(char *data);


Status CreateBiTreeSP(BiTree *T, char* definition);//特别版，录入表达式
#endif // BINARYTREE_H_INCLUDED
